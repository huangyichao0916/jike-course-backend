{"version":3,"sources":["baseUI/windowAlert/index.tsx","App.tsx","API/debounce.ts"],"names":["React","memo","props","content","maxWidth","userAgentInfo","navigator","userAgent","console","log","useState","isWindowAlertShow","setIsWindowAlertShow","handleWindowResize","useCallback","debounce","winWid","document","body","offsetWidth","useEffect","window","addEventListener","removeEventListener","finalClassName","classnames","windowAlert","doNotShow","className","App","renderRoutes","route","routes","func","delay","timer","args","clearTimeout","setTimeout","apply"],"mappings":"sRA2DeA,MAAMC,MAlDU,SAACC,GAAW,IAC/BC,EAAsBD,EAAtBC,QAASC,EAAaF,EAAbE,SACXC,EAAgBC,UAAUC,UAChCC,QAAQC,IAAIJ,GAH0B,MAIYK,oBAAkB,GAJ9B,mBAI/BC,EAJ+B,KAIZC,EAJY,KAMhCC,EAAqBC,sBACvBC,aAAS,WACL,IAAMC,EAAiBC,SAASC,KAAKC,YAEjCP,EADAI,EAASZ,KAKd,KACH,IAGJgB,qBAAU,YAEN,WACI,IAAMJ,EAAiBC,SAASC,KAAKC,YAEjCP,EADAI,EAASZ,GAFjB,KAQD,IAEHgB,qBAAU,WAGN,OADAC,OAAOC,iBAAiB,SAAUT,GAC3B,WACHQ,OAAOE,oBAAoB,SAAUV,MAE1C,IAEH,IAAMW,EAAyBC,IAC3B,CAAEC,aAAa,GACf,CAAEC,WAAYhB,IAGlB,OACI,yBAAKiB,UAAWJ,GACZ,yBAAKI,UAAU,WAAWzB,O,OC7BvB0B,UAjBM,SAAC3B,GAOlB,OACI,yBAAK0B,UAAU,OACX,kBAAC,EAAD,CAAazB,QAAS,6CAAWC,SAAU,OAE1C0B,YAAa5B,EAAM6B,MAAMC,W,gCCNvBjB,IAbY,SAACkB,EAAgBC,GACxC,IAAIC,EAAa,KACjB,OAAO,WAA0B,IAAC,IAAD,0BAAbC,EAAa,yBAAbA,EAAa,gBACzBD,GACAE,aAAaF,GAEjBA,EAAQG,YAAW,WACfL,EAAKM,MAAM,EAAMH,GACjBC,aAAaF,KACdD","file":"static/js/18.5cabb306.chunk.js","sourcesContent":["import React, { FC, useEffect, useState, useCallback } from 'react';\nimport './windowAlert.styl';\nimport debounce from '@/API/debounce';\nimport classnames from 'classnames';\n\ninterface Props {\n    content: string;\n    maxWidth: number;\n}\nconst WindowAlert: FC<Props> = (props) => {\n    const { content, maxWidth } = props;\n    const userAgentInfo = navigator.userAgent;\n    console.log(userAgentInfo);\n    const [isWindowAlertShow, setIsWindowAlertShow] = useState<boolean>(false);\n\n    const handleWindowResize = useCallback(\n        debounce(function () {\n            const winWid: number = document.body.offsetWidth;\n            if (winWid > maxWidth) {\n                setIsWindowAlertShow(true);\n            } else {\n                setIsWindowAlertShow(false);\n            }\n        }, 500),\n        []\n    );\n\n    useEffect(() => {\n        //在组件挂载的时候就作一次窗口宽度检测\n        (function () {\n            const winWid: number = document.body.offsetWidth;\n            if (winWid > maxWidth) {\n                setIsWindowAlertShow(true);\n            } else {\n                setIsWindowAlertShow(false);\n            }\n        })();\n    }, []);\n\n    useEffect(() => {\n        //监听浏览器窗口变化\n        window.addEventListener('resize', handleWindowResize);\n        return () => {\n            window.removeEventListener('resize', handleWindowResize);\n        };\n    }, []);\n\n    const finalClassName: string = classnames(\n        { windowAlert: true },\n        { doNotShow: !isWindowAlertShow }\n    );\n\n    return (\n        <div className={finalClassName}>\n            <div className=\"content\">{content}</div>\n        </div>\n    );\n};\n\nexport default React.memo(WindowAlert);\n","import React, { FC, useEffect } from 'react';\nimport './App.styl';\nimport './assets/font/iconfont.css';\nimport { renderRoutes } from 'react-router-config';\nimport WindowAlert from '@/baseUI/windowAlert';\nimport 'antd/dist/antd.min.css';\nimport { axiosInstance } from './utils/axiosIns';\n\nconst App: FC<any> = (props) => {\n    // useEffect(() => {\n    //     // getAllCourseLessons().then(console.log)\n    //     const param = { id: '1000', name: '权佳欣' };\n    //     axiosInstance.get('/jjj', param).then(console.log).catch(console.log)\n    // }, []);\n\n    return (\n        <div className=\"app\">\n            <WindowAlert content={'请用移动端观看'} maxWidth={1200} />\n\n            {renderRoutes(props.route.routes)}\n            {/* <Fooer /> */}\n        </div>\n    );\n};\n\nexport default App;\n","const debounce: Function = (func: Function, delay: number): Function => {\n    let timer: any = null;\n    return function (...args: any[]) {\n        if (timer) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout(() => {\n            func.apply(this, args);\n            clearTimeout(timer);\n        }, delay);\n    };\n};\n\nexport default debounce;"],"sourceRoot":""}