{"version":3,"sources":["types/loginOrRegister.ts","services/regs.ts","utils/axiosIns.js","services/requests.ts","pages/login/index.tsx"],"names":["LoginStat","LoginResultCode","RegisterResultCode","accountNumberReg","axiosInstance","axios","create","baseURL","interceptors","response","use","res","data","err","console","log","loginOrRegister","param","type","a","post","loginOrRegisterBaseUrl","withRouter","connect","state","dispatch","loadUserInfoToProps","user","loginOrRegisterActionCreator","props","history","useState","LOGIN","setState","accountNumber","setAcountNumber","password","setPassword","userName","setUserName","confirmPassword","setConfirmPasswordPassword","goToTheMainPage","push","className","placeholder","onChange","e","target","value","REGISTER","onClick","message","error","test","Number","then","resultCode","UNKNOW_ERROR","SUCCESS","success","resultObj","USER_NOT_EXIST","WRONG_PASSWORD","catch","USER_ALREADY_EXIST"],"mappings":"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","file":"static/js/25.d104c3e6.chunk.js","sourcesContent":["export interface User{\n    userId?:number;\n    accountNumber?:number;\n    password?:string;\n    balance?:number;\n    userName?:string;\n    avatar?:string;\n    somethingNotRead?:boolean;\n}\n\nexport enum LoginStat {\n    LOGIN = 0,\n    REGISTER = 1,\n}\n\nexport enum LoginResultCode{\n    UNKNOW_ERROR = 0,\n    SUCCESS = 1,\n    USER_NOT_EXIST = 2,\n    WRONG_PASSWORD = 3,\n}\n\nexport enum RegisterResultCode{\n    UNKNOW_ERROR = 0,\n    SUCCESS = 1,\n    USER_ALREADY_EXIST = 2,\n}","//账号格式正则\nexport const accountNumberReg:RegExp = /^\\d{3,15}$/;","import axios from 'axios';\n\nexport const baseUrl = 'http://localhost:8080';\n\nconst axiosInstance = axios.create({\n    baseURL: baseUrl,\n});\n\naxiosInstance.interceptors.response.use(\n    (res) => res.data,\n    (err) => {\n        console.log(err, '网络错误');\n    }\n);\n\nexport { axiosInstance };\n","import { axiosInstance } from '../utils/axiosIns';\nimport { CourseLesson } from '../types/courseLessons';\nimport { User, LoginStat } from '@/types/loginOrRegister';\n\n//全局返回类型接口\ninterface ResultObj{\n    resultCode: number;\n    resultObj:any;\n}\n\n/**\n * 登录注册的一些相关请求\n */\nconst loginOrRegisterBaseUrl = '/login-or-register';\nconst loginOrRegister = async (param: User, type: LoginStat) => {\n    return axiosInstance.post<any,ResultObj>(loginOrRegisterBaseUrl + '?type=' + type, param);\n};\n\n/**\n *讲堂-课程下的一些相关请求\n */\nconst courseLessonBaseUrl = '/course-lesson';\n\nconst insertCourseLessons = async (param: CourseLesson) => {\n    return axiosInstance.post(courseLessonBaseUrl + '/add', param);\n};\n\nconst getAllCourseLessons = async () => {\n    return axiosInstance.get(courseLessonBaseUrl + '/getAll');\n};\n\nconst getCourseLessonsByLimit = async (start: number, counts: number) => {\n    return axiosInstance.get(\n        courseLessonBaseUrl + `getByLimit?start=${start}&counts=${counts}`\n    );\n};\n\nexport { insertCourseLessons, getAllCourseLessons, getCourseLessonsByLimit,loginOrRegister };\n","import React, { FC, useState, useEffect } from 'react';\nimport { Input, Button, message } from 'antd';\nimport './index.styl';\nimport { withRouter } from 'react-router-dom';\nimport { LoginStat } from '@/types/loginOrRegister';\nimport { connect } from 'react-redux';\nimport { accountNumberReg } from '@/services/regs';\nimport { loginOrRegister } from '@/services/requests';\nimport { User } from '@/types/loginOrRegister';\nimport { LoginResultCode, RegisterResultCode } from '@/types/loginOrRegister';\nimport { loginOrRegisterActionCreator } from '@/store/action';\n\ninterface Props {\n    history: any;\n    loadUserInfoToProps: (user: User) => void;\n}\n\nconst Login: FC<Props> = (props) => {\n    const {loadUserInfoToProps,history} = props;\n\n    const [state, setState] = useState<number>(LoginStat.LOGIN);\n\n    const [accountNumber, setAcountNumber] = useState<string>('');\n    const [password, setPassword] = useState<string>('');\n    const [userName, setUserName] = useState<string>('');\n\n    const [confirmPassword, setConfirmPasswordPassword] = useState<string>('');\n\n    const validityCheck = (): boolean => {\n        if (state === LoginStat.LOGIN) {\n            if (accountNumber === '' || password === '') {\n                message.error('账号名或密码不能为空');\n                return false;\n            }\n            if (!accountNumberReg.test(accountNumber)) {\n                message.error('账号格式错误');\n                return false;\n            }\n            return true;\n        }\n        if (state === LoginStat.REGISTER) {\n            if (accountNumber === '' || password === '') {\n                message.error('账号名或密码不能为空');\n                return false;\n            }\n            if (!accountNumberReg.test(accountNumber)) {\n                message.error('账号格式错误');\n                return false;\n            }\n            if (password !== confirmPassword) {\n                message.error('两次输入的密码不一致');\n                return false;\n            }\n            return true;\n        }\n    };\n\n    const handleClick = () => {\n        const isLegal: boolean = validityCheck();\n        if (!isLegal) {\n            return;\n        }\n        if (state === LoginStat.LOGIN) {\n            const param: User = {\n                accountNumber: Number(accountNumber),\n                password,\n            };\n            loginOrRegister(param, state)\n                .then((res) => {\n                    switch (res.resultCode) {\n                        case LoginResultCode.UNKNOW_ERROR:\n                            message.error('登录出现了错误');\n                            break;\n                        case LoginResultCode.SUCCESS:\n                            message.success('登录成功');\n                            loadUserInfoToProps(res.resultObj)\n                            goToTheMainPage()\n                            break;\n                        case LoginResultCode.USER_NOT_EXIST:\n                            message.error('不存在该账号');\n                            break;\n                        case LoginResultCode.WRONG_PASSWORD:\n                            message.error('密码错误');\n                            break;\n                        default:\n                            message.error('登录出现了错误');\n                            break;\n                    }\n                })\n                .catch(console.log);\n        }\n        if (state === LoginStat.REGISTER) {\n            const param: User = {\n                accountNumber: Number(accountNumber),\n                password,\n                userName,\n            };\n            loginOrRegister(param, state)\n                .then((res) => {\n                    switch (res.resultCode) {\n                        case RegisterResultCode.UNKNOW_ERROR:\n                            message.error('注册出现了错误');\n                            break;\n                        case RegisterResultCode.SUCCESS:\n                            message.success('注册成功，已登录');\n                            loadUserInfoToProps(res.resultObj)\n                            goToTheMainPage()\n                            break;\n                        case RegisterResultCode.USER_ALREADY_EXIST:\n                            message.error('该账号已被注册');\n                            break;\n                        default:\n                            message.error('注册出现了错误');\n                            break;\n                    }\n                })\n                .catch(console.log);\n        }\n    };\n\n    const goToTheMainPage = () => {\n        history.push('/home/discover')\n    }\n\n    return (\n        <div className=\"login\">\n            <div className=\"content\">\n                <div className=\"title\">\n                    {state === LoginStat.LOGIN ? '登录' : '注册'}\n                </div>\n                <div className=\"col1\">\n                    <div className=\"label\">账号:</div>\n                    <div className=\"input\">\n                        <Input\n                            placeholder=\"请输入账号\"\n                            onChange={(e) => {\n                                setAcountNumber(e.target.value);\n                            }}\n                        />\n                    </div>\n                </div>\n                <div className=\"col1\">\n                    <div className=\"label\">密码:</div>\n                    <div className=\"input\">\n                        <Input\n                            placeholder=\"请输入密码\"\n                            onChange={(e) => {\n                                setPassword(e.target.value);\n                            }}\n                            type=\"password\"\n                        />\n                    </div>\n                </div>\n                {state === LoginStat.REGISTER && (\n                    <>\n                        <div className=\"col1\">\n                            <div className=\"label\">确认密码:</div>\n                            <div className=\"input\">\n                                <Input\n                                    placeholder=\"请输入密码\"\n                                    onChange={(e) => {\n                                        setConfirmPasswordPassword(\n                                            e.target.value\n                                        );\n                                    }}\n                                    type=\"password\"\n                                />\n                            </div>\n                        </div>\n                        <div className=\"col1\">\n                            <div className=\"label\">用户名:</div>\n                            <div className=\"input\">\n                                <Input\n                                    placeholder=\"请输入用户名\"\n                                    onChange={(e) => {\n                                        setUserName(e.target.value);\n                                    }}\n                                />\n                            </div>\n                        </div>\n                    </>\n                )}\n                <div className=\"regisOrLogin\">\n                    <a\n                        onClick={() => {\n                            if (state === LoginStat.LOGIN) {\n                                setState(LoginStat.REGISTER);\n                            } else {\n                                setState(LoginStat.LOGIN);\n                            }\n                        }}\n                    >\n                        {state === LoginStat.LOGIN\n                            ? '没有账号？去注册'\n                            : '已有账号，去登录'}\n                    </a>\n                </div>\n                <div className=\"confirm\">\n                    <div className=\"button\">\n                        <Button onClick={handleClick}>确认</Button>\n                    </div>\n                </div>\n                <div className=\"dontLogin\">\n                    <a onClick={goToTheMainPage}>不想登录，直接浏览课程</a>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {};\n};\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        loadUserInfoToProps: (user: User) => {\n            dispatch(loginOrRegisterActionCreator(user));\n        },\n    };\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));\n"],"sourceRoot":""}