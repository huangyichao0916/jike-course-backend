{"version":3,"sources":["components/discover/discoverLessonEveryday/discoverLessonEverydayItem/index.tsx","pages/discover/discoverLessonEveryday/index.tsx","components/discover/discoverTotalChoiceness/discoverTotalChoicenessItem/index.tsx","pages/discover/discoverTotalChoiceness/index.tsx","pages/discover/index.tsx","baseUI/header/index.tsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","mock/discover-leeson-everyday-data/index.js","mock/discover-total-choiceness-data/index.js"],"names":["React","memo","props","title","subtitle","avatar","className","src","alt","useState","discoverData","setDiscoverData","loadData","useCallback","axios","get","then","res","Error","data","catch","err","console","log","useEffect","items","map","item","key","id","to","onClick","setSw","newSw","Swiper","loop","autoplay","delay","images","i","width","height","leftTitle","rightTitle","type","placeholder","judgeIsItIconfont","Header","divLeft","divRight","divMiddle","this","isGoBackNeeded","leftTitleURL","middleTitle","rightTitleURL","window","history","back","test","dangerouslySetInnerHTML","__html","e","preventDefault","Component","_slicedToArray","arr","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","unsupportedIterableToArray","TypeError","lessonEverydayData","require","urlReg","Mock","mock","option","url","match","randomNumArr","randomNum","Math","floor","random","Set","totalChoicenessData"],"mappings":"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","file":"static/js/13.8d298945.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport './discoverLessonEverydayItem.styl';\nimport { DiscoverLessonEverydayItemInt } from '@/pages/discover/discoverLessonEveryday';\n\ninterface Props extends DiscoverLessonEverydayItemInt {}\n\nconst GeekUniversityItem: FC<Props> = (props) => {\n    const { title, subtitle, avatar } = props;\n\n    return (\n        <div className=\"geek-university-item\">\n            <div className=\"geek-university-item-img\">\n                <img src={avatar} alt=\"\" />\n            </div>\n            <div className=\"geek-university-item-title\">{title}</div>\n            <div className=\"geek-university-item-desc\">{subtitle}</div>\n        </div>\n    );\n};\n\nexport default React.memo(GeekUniversityItem);\n","import React, { FC, useEffect, useState, useCallback } from 'react';\nimport axios from 'axios';\nimport '@/mock/discover-leeson-everyday-data';\nimport { Link } from 'react-router-dom';\n\nimport DiscoverLessonEverydayItem from '@/components/discover/discoverLessonEveryday/discoverLessonEverydayItem';\n\nexport interface DiscoverLessonEverydayItemInt {\n    id: number;\n    title: string;\n    subtitle: string;\n    avatar: string;\n}\n\nconst DiscoverLessonEveryday: FC<any> = (props) => {\n    const [discoverData, setDiscoverData] = useState<\n        DiscoverLessonEverydayItemInt[]\n    >([]);\n\n    const loadData = useCallback(() => {\n        axios\n            .get('mock/discover/lessonEveryday')\n            .then((res) => {\n                if (!res) {\n                    throw new Error('出错了');\n                }\n                setDiscoverData(res.data);\n            })\n            .catch((err) => console.log(err));\n    }, []);\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    const items: Array<JSX.Element> = discoverData.map(\n        (item: DiscoverLessonEverydayItemInt) => {\n            return <DiscoverLessonEverydayItem {...item} key={item.id} />;\n        }\n    );\n\n    return (\n        <div className=\"geek-university\">\n            <div className=\"geek-university-header\">\n                <span></span>\n                <div className=\"geek-university-title\">每日一课</div>\n                <Link to=\"/allDiscoverLessonEveryday\">\n                    <div className=\"view-more\">查看更多</div>\n                </Link>\n            </div>\n            <div className=\"geek-university-wrapper\">{items}</div>\n            <div className=\"change-for-other\" onClick={loadData}>\n                <span className=\"icon iconfont\">&#xe638; 换一换</span>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(DiscoverLessonEveryday);\n// export default DiscoverLessonEveryday;\n","import React, { FC } from 'react';\nimport { DiscoverTotalChoicenessItemInt } from '@/pages/discover/discoverTotalChoiceness';\nimport './discoverTotalChoicenessItem.styl';\n\ninterface Props extends DiscoverTotalChoicenessItemInt {}\n\nconst DiscoverTotalChoicenessItem: FC<Props> = (props) => {\n    const { title, avatar } = props;\n\n    return (\n        <div className=\"geek-university-item\">\n            <div className=\"geek-university-item-img\">\n                <img src={avatar} alt=\"\" />\n            </div>\n            <div className=\"geek-university-item-title\">{title}</div>\n        </div>\n    );\n};\n\nexport default React.memo(DiscoverTotalChoicenessItem);\n","import React, { FC, useCallback, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport '@/mock/discover-total-choiceness-data';\nimport { Link } from 'react-router-dom';\n\nimport DiscoverTotalChoicenessItem from '@/components/discover/discoverTotalChoiceness/discoverTotalChoicenessItem';\n\nexport interface DiscoverTotalChoicenessItemInt {\n    id: number;\n    title: string;\n    avatar: string;\n}\n\nconst DiscoverTotalChoiceness: FC<any> = (props) => {\n    const [discoverData, setDiscoverData] = useState<\n        DiscoverTotalChoicenessItemInt[]\n    >([]);\n\n    const loadData = useCallback(() => {\n        axios\n            .get('mock/discover/totalChoiceness')\n            .then((res) => {\n                if (!res) {\n                    throw new Error('出错了');\n                }\n                setDiscoverData(res.data);\n            })\n            .catch((err) => console.log(err));\n    }, []);\n\n    useEffect(() => {\n        loadData();\n    }, []);\n\n    const items: Array<JSX.Element> = discoverData.map(\n        (item: DiscoverTotalChoicenessItemInt) => {\n            return <DiscoverTotalChoicenessItem {...item} key={item.id} />;\n        }\n    );\n\n    return (\n        <div className=\"geek-university\">\n            <div className=\"geek-university-header\">\n                <span></span>\n                <div className=\"geek-university-title\">精选合辑</div>\n                <Link to=\"/allDiscoverTotalChoiceness\">\n                    <div className=\"view-more\">查看更多</div>\n                </Link>\n            </div>\n            <div className=\"geek-university-wrapper\">{items}</div>\n            <div className=\"change-for-other\" onClick={loadData}>\n                <span className=\"icon iconfont\">&#xe638; 换一换</span>\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(DiscoverTotalChoiceness);\n// export default DiscoverTotalChoiceness;\n","import React, { useEffect, useState, FC } from 'react';\nimport Header from '@/baseUI/header';\nimport './discover.styl';\nimport Swiper from 'swiper';\nimport 'swiper/css/swiper.min.css';\nimport '@/mock/discover-leeson-everyday-data';\n\nimport DiscoverLessonEveryday from './discoverLessonEveryday';\nimport DiscoverTotalChoiceness from './discoverTotalChoiceness';\n\nconst Discover: FC<any> = () => {\n    const swiperImgArr: string[] = [\n        'https://static001.geekbang.org/resource/image/cb/87/cb5421545f441b0940be4e99f508f587.jpg',\n        'https://static001.geekbang.org/resource/image/yy/c3/yy1407ebbb40d7c4534134bbc18b2ac3.jpg',\n        'https://static001.geekbang.org/resource/image/e1/a1/e1638d3182a0ed76ed5f446612cf90a1.png',\n        'https://static001.geekbang.org/resource/image/d0/02/d008de059acbb6c623fc5332bac2e902.jpg',\n        'https://static001.geekbang.org/resource/image/d7/a1/d7993d03d0604yyeeed2a08c2cfb1da1.png',\n    ];\n\n    const [sw, setSw] = useState<null | Swiper>(null);\n    useEffect(() => {\n        const newSw = new Swiper('.slider-container', {\n            loop: true,\n            autoplay: {\n                delay: 2000,\n            },\n        });\n        setSw(newSw);\n        return () => {\n            setSw(null);\n        };\n    }, []);\n\n    const images: Array<JSX.Element> = swiperImgArr.map(\n        (item: string, i: number) => {\n            return (\n                <div className=\"swiper-slide\" key={i}>\n                    <img\n                        src={item}\n                        alt=\"图片不见了\"\n                        width=\"100%\"\n                        height=\"100%\"\n                    />\n                </div>\n            );\n        }\n    );\n\n    return (\n        <div className=\"discover\">\n            <Header leftTitle={'发现'} rightTitle={'&#xe645;'} />\n            <div className=\"discover-input-search\">\n                <input\n                    className=\"icon iconfont\"\n                    type=\"text\"\n                    placeholder=\"&#xe606; 搜索课程、课程内容、每日一课等\"\n                />\n            </div>\n            <div className=\"slider-container\">\n                <div className=\"swiper-wrapper\">{images}</div>\n            </div>\n            <div className=\"discover-content\">\n                <div className=\"maitaozheshuo\">\n                    <div className=\"maitaozheshuo-title\">\n                        <div className=\"maitaozheshuo-img\">\n                            <img\n                                src=\"https://static001.geekbang.org/resource/image/37/3b/378b7d1867d83e1ab405ee7e052e843b.png\"\n                                alt=\"\"\n                            />\n                        </div>\n                        <div className=\"maitaozheshuo-name\">卖桃者说</div>\n                        <span className=\"icon iconfont\">&#xe613;</span>\n                    </div>\n                    <div className=\"maitaozheshuo-article\">\n                        <span className=\"icon iconfont\">&#xe608;</span>\n                        第320期 | 你离一个优秀架构师还差几步?\n                    </div>\n                </div>\n                <DiscoverLessonEveryday />\n                <DiscoverTotalChoiceness />\n            </div>\n        </div>\n    );\n};\n\nexport default React.memo(Discover);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './header.styl';\n\ninterface Props {\n    isGoBackNeeded?: boolean;\n    leftTitle?: string;\n    leftTitleURL?: string;\n    middleTitle?: string;\n    rightTitle?: string;\n    rightTitleURL?: string;\n}\nconst judgeIsItIconfont: RegExp = /^&#.+;$/;\nclass Header extends Component<Props> {\n    render() {\n        const {\n            isGoBackNeeded = false,\n            leftTitle,\n            leftTitleURL,\n            middleTitle,\n            rightTitle,\n            rightTitleURL,\n        } = this.props;\n\n        //左侧的title的判断\n        let divLeft: JSX.Element;\n\n        if (isGoBackNeeded) {\n            if (leftTitle || leftTitleURL) {\n                throw new Error(\n                    '在确定了leftTitle是回退按钮时，不能传入leftTitle或者leftTitleURL了'\n                );\n            }\n            divLeft = (\n                <span\n                    className=\"icon iconfont\"\n                    onClick={() => window.history.back()}\n                >\n                    &#xe647;\n                </span>\n            );\n        } else {\n            if (leftTitle) {\n                if (judgeIsItIconfont.test(leftTitle)) {\n                    if (leftTitleURL) {\n                        divLeft = (\n                            <div className=\"leftTitle\">\n                                <Link to={leftTitleURL}>\n                                    <span\n                                        className=\"icon iconfont\"\n                                        dangerouslySetInnerHTML={{\n                                            __html: leftTitle,\n                                        }}\n                                    ></span>\n                                </Link>\n                            </div>\n                        );\n                    } else {\n                        divLeft = (\n                            <div className=\"leftTitle\">\n                                <span\n                                    className=\"icon iconfont\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: leftTitle,\n                                    }}\n                                ></span>\n                            </div>\n                        );\n                    }\n                } else {\n                    if (leftTitleURL) {\n                        divLeft = (\n                            <div className=\"leftTitle\">\n                                <Link to={leftTitleURL}>{leftTitle}</Link>\n                            </div>\n                        );\n                    } else {\n                        divLeft = <div className=\"leftTitle\">{leftTitle}</div>;\n                    }\n                }\n            } else {\n                if (leftTitleURL) {\n                    throw new Error(\n                        '组件Props参数错误，传入leftTitleURL的前提是要传入leftTitle'\n                    );\n                } else {\n                    divLeft = (\n                        <span\n                            className=\"nothing-left\"\n                            onClick={(e) => e.preventDefault()}\n                        >\n                            nothing-left\n                        </span>\n                    );\n                }\n            }\n        }\n\n        //右侧的title的判断\n        let divRight: JSX.Element;\n\n        if (rightTitle) {\n            if (judgeIsItIconfont.test(rightTitle)) {\n                if (rightTitleURL) {\n                    divRight = (\n                        <div className=\"rightTitle\">\n                            <Link to={rightTitleURL}>\n                                <span\n                                    className=\"icon iconfont\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: rightTitle,\n                                    }}\n                                ></span>\n                            </Link>\n                        </div>\n                    );\n                } else {\n                    divRight = (\n                        <div className=\"rightTitle\">\n                            <span\n                                className=\"icon iconfont\"\n                                dangerouslySetInnerHTML={{ __html: rightTitle }}\n                            ></span>\n                        </div>\n                    );\n                }\n            } else {\n                if (rightTitleURL) {\n                    divRight = (\n                        <div className=\"rightTitle\">\n                            <Link to={rightTitleURL}>{rightTitle}</Link>\n                        </div>\n                    );\n                } else {\n                    divRight = <div className=\"rightTitle\">{rightTitle}</div>;\n                }\n            }\n        } else {\n            if (rightTitleURL) {\n                throw new Error(\n                    '组件Props参数错误，传入rightTitleURL的前提是要传入rightTitle'\n                );\n            } else {\n                divRight = (\n                    <div\n                        className=\"nothing-right\"\n                        onClick={(e) => e.preventDefault()}\n                    >\n                        nothing-right\n                    </div>\n                );\n            }\n        }\n\n        //中间的title的判断\n        let divMiddle: JSX.Element;\n        if (middleTitle) {\n            divMiddle = <div className=\"middleTitle\">{middleTitle}</div>;\n        } else {\n            divMiddle = (\n                <div\n                    className=\"middleTitle no-middle-title\"\n                    onClick={(e) => e.preventDefault()}\n                >\n                    no-middle-title\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"baseUIHeader\">\n                {divLeft}\n                {divMiddle}\n                {divRight}\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import Mock from 'mockjs';\nconst lessonEverydayData = require('./lessonEverydayData.json');\nconst urlReg = /mock\\/discover\\/lessonEveryday(\\/all)?/;\n\nconst data = Mock.mock(urlReg, function (option) {\n    const { url } = option;\n    const havaAll = url.match(urlReg)[1];\n\n    if (!havaAll) {\n        //如果URL中带有/all，那么就返回所有数据\n        let randomNumArr = [];\n        while (randomNumArr.length < 4) {\n            const randomNum = Math.floor(Math.random() * 60);\n            randomNumArr.push(randomNum);\n            randomNumArr = [...new Set(randomNumArr)];\n        }\n\n        const resArr = randomNumArr.map((item) => lessonEverydayData[item]);\n\n        return resArr;\n    } else {\n        return lessonEverydayData;\n    }\n});\n\nexport default data;\n","import Mock from 'mockjs';\nconst totalChoicenessData = require('./totalChoiceness.json');\nconst urlReg = /mock\\/discover\\/totalChoiceness(\\/all)?/;\n\nconst data = Mock.mock(urlReg, function (option) {\n    const { url } = option;\n    const havaAll = url.match(urlReg)[1];\n\n    if (!havaAll) {\n        //如果URL中带有/all，那么就返回所有数据\n        let randomNumArr = [];\n        while (randomNumArr.length < 4) {\n            const randomNum = Math.floor(Math.random() * 40);\n            randomNumArr.push(randomNum);\n            randomNumArr = [...new Set(randomNumArr)];\n        }\n\n        const resArr = randomNumArr.map((item) => totalChoicenessData[item]);\n\n        return resArr;\n    } else {\n        return totalChoicenessData;\n    }\n});\n\nexport default data;\n"],"sourceRoot":""}