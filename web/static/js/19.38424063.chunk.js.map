{"version":3,"sources":["components/rechargeRecord/rechargeRecordItem/index.jsx","pages/rechargeRecord/index.tsx","baseUI/header/index.tsx"],"names":["RechargeRecordItem","styled","div","connect","state","dataSource","getIn","toJS","props","items","map","item","index","year","time","number","key","className","isGoBackNeeded","middleTitle","judgeIsItIconfont","Header","divLeft","divRight","divMiddle","this","leftTitle","leftTitleURL","rightTitle","rightTitleURL","Error","onClick","window","history","back","test","to","dangerouslySetInnerHTML","__html","e","preventDefault","Component"],"mappings":"4LAEaA,E,OAAqBC,EAAOC,IAAV,mF,gBCyChBC,uBANS,SAACC,GACrB,MAAO,CACHC,WAAYD,EAAME,MAAM,CAAC,6BAA6BC,UAI/CJ,EA/BmB,SAACK,GAAW,IAEpCC,EADiBD,EAAfH,WACqCK,KACzC,SAACC,EAA6BC,GAAmB,IACrCC,EAAuBF,EAAvBE,KAAMC,EAAiBH,EAAjBG,KAAMC,EAAWJ,EAAXI,OACpB,OACI,kBAACf,EAAD,CAAoBgB,IAAKJ,GACrB,yBAAKK,UAAU,MAAf,qBAAwBF,EAAxB,UACA,yBAAKE,UAAU,QAAf,qBACQJ,EACJ,6BAFJ,qBAGQC,OAMxB,OACI,yBAAKG,UAAU,kBACX,kBAAC,IAAD,CAAQC,gBAAgB,EAAMC,YAAa,6BAC3C,yBAAKF,UAAU,+BAA+BR,Q,4FCpBpDW,G,MAA4B,WAC5BC,E,4JACF,WAAU,IAWFC,EA0EAC,EAwDAC,EA7IC,EAQDC,KAAKjB,MARJ,IAEDU,sBAFC,SAGDQ,EAHC,EAGDA,UACAC,EAJC,EAIDA,aACAR,EALC,EAKDA,YACAS,EANC,EAMDA,WACAC,EAPC,EAODA,cAMJ,GAAIX,EAAgB,CAChB,GAAIQ,GAAaC,EACb,MAAM,IAAIG,MACN,8IAGRR,EACI,0BACIL,UAAU,gBACVc,QAAS,kBAAMC,OAAOC,QAAQC,SAFlC,eAQJ,GAAIR,EAGQJ,EAFJF,EAAkBe,KAAKT,GACnBC,EAEI,yBAAKV,UAAU,aACX,kBAAC,IAAD,CAAMmB,GAAIT,GACN,0BACIV,UAAU,gBACVoB,wBAAyB,CACrBC,OAAQZ,OAQxB,yBAAKT,UAAU,aACX,0BACIA,UAAU,gBACVoB,wBAAyB,CACrBC,OAAQZ,MAOxBC,EAEI,yBAAKV,UAAU,aACX,kBAAC,IAAD,CAAMmB,GAAIT,GAAeD,IAIvB,yBAAKT,UAAU,aAAaS,OAG3C,CACH,GAAIC,EACA,MAAM,IAAIG,MACN,8HAGJR,EACI,0BACIL,UAAU,eACVc,QAAS,SAACQ,GAAD,OAAOA,EAAEC,mBAFtB,gBAchB,GAAIZ,EAGQL,EAFJH,EAAkBe,KAAKP,GACnBC,EAEI,yBAAKZ,UAAU,cACX,kBAAC,IAAD,CAAMmB,GAAIP,GACN,0BACIZ,UAAU,gBACVoB,wBAAyB,CACrBC,OAAQV,OAQxB,yBAAKX,UAAU,cACX,0BACIA,UAAU,gBACVoB,wBAAyB,CAAEC,OAAQV,MAM/CC,EAEI,yBAAKZ,UAAU,cACX,kBAAC,IAAD,CAAMmB,GAAIP,GAAgBD,IAIvB,yBAAKX,UAAU,cAAcW,OAG7C,CACH,GAAIC,EACA,MAAM,IAAIC,MACN,gIAGJP,EACI,yBACIN,UAAU,gBACVc,QAAS,SAACQ,GAAD,OAAOA,EAAEC,mBAFtB,iBAyBZ,OAZIhB,EADAL,EACY,yBAAKF,UAAU,eAAeE,GAGtC,yBACIF,UAAU,8BACVc,QAAS,SAACQ,GAAD,OAAOA,EAAEC,mBAFtB,mBAUJ,yBAAKvB,UAAU,gBACVK,EACAE,EACAD,O,GAhKIkB,aAsKNpB,O","file":"static/js/19.38424063.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const RechargeRecordItem = styled.div`\n    outline: 1px solid blue;\n    margin-top: 0.2rem;\n`;\n","import React, { FC } from 'react';\nimport './rechargeRecord.styl';\nimport { RechargeRecordItem } from '@/components/rechargeRecord/rechargeRecordItem';\nimport Header from '@/baseUI/header';\n\nimport { connect } from 'react-redux';\n\nimport { RechargeRecordItemInt } from '@/store/types';\n\ninterface Props {\n    dataSource: Array<RechargeRecordItemInt>;\n}\nconst RechargeRecord: FC<Props> = (props) => {\n    const { dataSource } = props;\n    const items: Array<JSX.Element> = dataSource.map(\n        (item: RechargeRecordItemInt, index: number) => {\n            const { year, time, number } = item;\n            return (\n                <RechargeRecordItem key={index}>\n                    <div className=\"up\">充值了{number}元</div>\n                    <div className=\"down\">\n                        日期：{year}\n                        <br />\n                        时间：{time}\n                    </div>\n                </RechargeRecordItem>\n            );\n        }\n    );\n    return (\n        <div className=\"rechargeRecord\">\n            <Header isGoBackNeeded={true} middleTitle={'充值记录'} />\n            <div className=\"rechargeRecord-item-wrapper\">{items}</div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => {\n    return {\n        dataSource: state.getIn(['rechargeRecordDataSource']).toJS(),\n    };\n};\n\nexport default connect(mapStateToProps)(RechargeRecord);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './header.styl';\n\ninterface Props {\n    isGoBackNeeded?: boolean;\n    leftTitle?: string;\n    leftTitleURL?: string;\n    middleTitle?: string;\n    rightTitle?: string;\n    rightTitleURL?: string;\n}\nconst judgeIsItIconfont: RegExp = /^&#.+;$/;\nclass Header extends Component<Props> {\n    render() {\n        const {\n            isGoBackNeeded = false,\n            leftTitle,\n            leftTitleURL,\n            middleTitle,\n            rightTitle,\n            rightTitleURL,\n        } = this.props;\n\n        //左侧的title的判断\n        let divLeft: JSX.Element;\n\n        if (isGoBackNeeded) {\n            if (leftTitle || leftTitleURL) {\n                throw new Error(\n                    '在确定了leftTitle是回退按钮时，不能传入leftTitle或者leftTitleURL了'\n                );\n            }\n            divLeft = (\n                <span\n                    className=\"icon iconfont\"\n                    onClick={() => window.history.back()}\n                >\n                    &#xe647;\n                </span>\n            );\n        } else {\n            if (leftTitle) {\n                if (judgeIsItIconfont.test(leftTitle)) {\n                    if (leftTitleURL) {\n                        divLeft = (\n                            <div className=\"leftTitle\">\n                                <Link to={leftTitleURL}>\n                                    <span\n                                        className=\"icon iconfont\"\n                                        dangerouslySetInnerHTML={{\n                                            __html: leftTitle,\n                                        }}\n                                    ></span>\n                                </Link>\n                            </div>\n                        );\n                    } else {\n                        divLeft = (\n                            <div className=\"leftTitle\">\n                                <span\n                                    className=\"icon iconfont\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: leftTitle,\n                                    }}\n                                ></span>\n                            </div>\n                        );\n                    }\n                } else {\n                    if (leftTitleURL) {\n                        divLeft = (\n                            <div className=\"leftTitle\">\n                                <Link to={leftTitleURL}>{leftTitle}</Link>\n                            </div>\n                        );\n                    } else {\n                        divLeft = <div className=\"leftTitle\">{leftTitle}</div>;\n                    }\n                }\n            } else {\n                if (leftTitleURL) {\n                    throw new Error(\n                        '组件Props参数错误，传入leftTitleURL的前提是要传入leftTitle'\n                    );\n                } else {\n                    divLeft = (\n                        <span\n                            className=\"nothing-left\"\n                            onClick={(e) => e.preventDefault()}\n                        >\n                            nothing-left\n                        </span>\n                    );\n                }\n            }\n        }\n\n        //右侧的title的判断\n        let divRight: JSX.Element;\n\n        if (rightTitle) {\n            if (judgeIsItIconfont.test(rightTitle)) {\n                if (rightTitleURL) {\n                    divRight = (\n                        <div className=\"rightTitle\">\n                            <Link to={rightTitleURL}>\n                                <span\n                                    className=\"icon iconfont\"\n                                    dangerouslySetInnerHTML={{\n                                        __html: rightTitle,\n                                    }}\n                                ></span>\n                            </Link>\n                        </div>\n                    );\n                } else {\n                    divRight = (\n                        <div className=\"rightTitle\">\n                            <span\n                                className=\"icon iconfont\"\n                                dangerouslySetInnerHTML={{ __html: rightTitle }}\n                            ></span>\n                        </div>\n                    );\n                }\n            } else {\n                if (rightTitleURL) {\n                    divRight = (\n                        <div className=\"rightTitle\">\n                            <Link to={rightTitleURL}>{rightTitle}</Link>\n                        </div>\n                    );\n                } else {\n                    divRight = <div className=\"rightTitle\">{rightTitle}</div>;\n                }\n            }\n        } else {\n            if (rightTitleURL) {\n                throw new Error(\n                    '组件Props参数错误，传入rightTitleURL的前提是要传入rightTitle'\n                );\n            } else {\n                divRight = (\n                    <div\n                        className=\"nothing-right\"\n                        onClick={(e) => e.preventDefault()}\n                    >\n                        nothing-right\n                    </div>\n                );\n            }\n        }\n\n        //中间的title的判断\n        let divMiddle: JSX.Element;\n        if (middleTitle) {\n            divMiddle = <div className=\"middleTitle\">{middleTitle}</div>;\n        } else {\n            divMiddle = (\n                <div\n                    className=\"middleTitle no-middle-title\"\n                    onClick={(e) => e.preventDefault()}\n                >\n                    no-middle-title\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"baseUIHeader\">\n                {divLeft}\n                {divMiddle}\n                {divRight}\n            </div>\n        );\n    }\n}\n\nexport default Header;\n"],"sourceRoot":""}